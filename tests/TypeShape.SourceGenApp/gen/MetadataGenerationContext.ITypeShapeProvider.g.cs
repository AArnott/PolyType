// <auto-generated/>
#nullable enable

using TypeShape;
using TypeShape.Abstractions;

public partial class MetadataGenerationContext : ITypeShapeProvider
{
    public IType<T>? GetShape<T>()
        => (IType<T>?)GetShape(typeof(T));

    public IType? GetShape(Type type)
    {
        if (type == typeof(bool))
            return Bool;

        if (type == typeof(int))
            return Int32;

        if (type == typeof(string))
            return String;

        if (type == typeof(Dictionary<string, int>))
            return DictionaryStringInt32;

        if (type == typeof(List<int>))
            return ListInt32;

        if (type == typeof(MyPoco))
            return MyPoco;

        return null;
    }
}
